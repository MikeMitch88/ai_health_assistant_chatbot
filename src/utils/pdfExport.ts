import { Message, Symptom, ConversationContext } from '../types/medical';

export class PDFExporter {
  static generateSummaryText(
    messages: Message[], 
    symptoms: Symptom[], 
    context: ConversationContext
  ): string {
    const currentDate = new Date().toLocaleDateString();
    const currentTime = new Date().toLocaleTimeString();

    let summary = `HEALTH CONSULTATION SUMMARY\n`;
    summary += `Generated on: ${currentDate} at ${currentTime}\n`;
    summary += `\n${'='.repeat(50)}\n\n`;

    // Patient Information Section
    summary += `PATIENT INFORMATION:\n`;
    summary += `Age: ${context.patientAge || 'Not specified'}\n`;
    summary += `Gender: ${context.patientGender || 'Not specified'}\n`;
    if (context.chronicConditions && context.chronicConditions.length > 0) {
      summary += `Chronic Conditions: ${context.chronicConditions.join(', ')}\n`;
    }
    if (context.medications && context.medications.length > 0) {
      summary += `Current Medications: ${context.medications.join(', ')}\n`;
    }
    if (context.allergies && context.allergies.length > 0) {
      summary += `Known Allergies: ${context.allergies.join(', ')}\n`;
    }
    summary += `\n`;

    // Symptoms Section
    summary += `REPORTED SYMPTOMS:\n`;
    if (symptoms.length === 0) {
      summary += `No specific symptoms recorded.\n`;
    } else {
      symptoms.forEach((symptom, index) => {
        summary += `${index + 1}. ${symptom.name.charAt(0).toUpperCase() + symptom.name.slice(1)}\n`;
        summary += `   - Severity: ${symptom.severity}\n`;
        if (symptom.duration) {
          summary += `   - Duration: ${symptom.duration}\n`;
        }
        if (symptom.onset) {
          summary += `   - Onset: ${symptom.onset}\n`;
        }
        if (symptom.bodyPart) {
          summary += `   - Body Part: ${symptom.bodyPart}\n`;
        }
        summary += `\n`;
      });
    }

    // Conversation Summary
    summary += `CONSULTATION CONVERSATION:\n`;
    const userMessages = messages.filter(m => m.isUser);
    const aiResponses = messages.filter(m => !m.isUser && m.type !== 'disclaimer');

    summary += `Total User Messages: ${userMessages.length}\n`;
    summary += `AI Responses Provided: ${aiResponses.length}\n`;
    summary += `Urgency Level: ${context.urgencyLevel.toUpperCase()}\n\n`;

    // Key AI Recommendations
    const recommendationMessages = messages.filter(m => 
      !m.isUser && (m.type === 'recommendation' || m.type === 'diagnosis')
    );

    if (recommendationMessages.length > 0) {
      summary += `KEY AI RECOMMENDATIONS:\n`;
      recommendationMessages.forEach((msg, index) => {
        summary += `${index + 1}. ${msg.text.replace(/\*\*/g, '').substring(0, 200)}...\n\n`;
      });
    }

    // Full Conversation Log
    summary += `DETAILED CONVERSATION LOG:\n`;
    summary += `${'='.repeat(30)}\n\n`;

    messages.forEach((message, index) => {
      const timestamp = message.timestamp.toLocaleTimeString();
      const speaker = message.isUser ? 'USER' : 'AI ASSISTANT';
      
      summary += `[${timestamp}] ${speaker}:\n`;
      summary += `${message.text}\n\n`;
    });

    // Medical Disclaimer
    summary += `\n${'='.repeat(50)}\n`;
    summary += `IMPORTANT MEDICAL DISCLAIMER:\n`;
    summary += `This summary is generated by an AI health assistant and is for informational purposes only. `;
    summary += `It should not be used as a substitute for professional medical advice, diagnosis, or treatment. `;
    summary += `Always seek the advice of qualified healthcare providers with any questions you may have `;
    summary += `regarding a medical condition. Never disregard professional medical advice or delay seeking `;
    summary += `treatment because of information provided by this AI assistant.\n\n`;
    summary += `In case of a medical emergency, call 911 immediately.\n`;
    summary += `\nGenerated by AI Health Assistant - Supporting UN SDG 3: Good Health and Well-being\n`;

    return summary;
  }

  static downloadSummary(
    messages: Message[], 
    symptoms: Symptom[], 
    context: ConversationContext
  ): void {
    const summaryText = this.generateSummaryText(messages, symptoms, context);
    const blob = new Blob([summaryText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `health-consultation-summary-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    URL.revokeObjectURL(url);
  }

  static async generatePDFSummary(
    messages: Message[], 
    symptoms: Symptom[], 
    context: ConversationContext
  ): Promise<void> {
    // For now, we'll use text download since PDF generation requires additional libraries
    // In a production environment, you would use libraries like jsPDF or Puppeteer
    this.downloadSummary(messages, symptoms, context);
  }
}